@page "/adduser"
@using SQLandEmailwithBlazorPage.Data
@using Newtonsoft.Json
@using SQLandEmailwithBlazorPage.Models
@using System.Text
<h1>Populate DB with Sample Values</h1>

<button class="btn btn-primary" @onclick="PopulateDBAsync">PopulateFakeDB</button><br />
<div class="simple-form">
    <EditForm Model="@newUser">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="first-name">First Name</label>
            <InputText id="first-name" class="form-control" @bind-Value="newUser.FirstName" placeholder="First Name"></InputText>
            <ValidationMessage For="@(() => newUser.FirstName)" />
        </div>
        <div class="form-group">
            <label for="last-name">Last Name</label>
            <InputText id="last-name" class="form-control" @bind-Value="newUser.LastName" placeholder="Last Name"></InputText>
            <ValidationMessage For="@(() => newUser.LastName)" />
        </div>
        <div class="form-group">
            <label for="email">Email</label>
            <InputText id="email" class="form-control" @bind-Value="newUser.Email" placeholder="email"></InputText>
            <ValidationMessage For="@(() => newUser.Email)" />
        </div>
        <div class="form-group">
            <label for="Hobbies">Hobbies</label>
            <input @bind="newUser.Hobbies" type="text" class="form-control" id="Hobbies" placeholder="Hobbies" />
        </div>
        <div class="form-group">
            <label for="ocupation">Ocupation</label>
            <input @bind="newUser.Ocupation" type="text" class="form-control" id="name" placeholder="Ocupation" />
        </div>
        <div class="form-group">
            <label for="age">Age</label>
            <InputNumber id="age" class="form-control" @bind-Value="newUser.Age" type="number" placeholder="Age" />
            <ValidationMessage For="@(() => newUser.Age)" />

        </div>
    </EditForm>
</div>
<button class="btn btn-success" @onclick="AddUserAsync">Add User</button>

@code {
    [Inject]
    public NavigationManager MyNavigationManager { get; set; }
    HttpClient httpClient = new HttpClient();
    PersonModel newUser;
    protected override void OnInitialized()
    {
        httpClient.BaseAddress = new Uri(MyNavigationManager.BaseUri);
        newUser = new PersonModel();
    }
    async Task PopulateDBAsync()
    {
        await httpClient.GetAsync("api/PopulateDB");
    }
    async Task AddUserAsync()
    {
        if (string.IsNullOrEmpty(newUser.Email) || string.IsNullOrEmpty(newUser.FirstName) || string.IsNullOrEmpty(newUser.LastName)
            || string.IsNullOrEmpty(newUser.Hobbies) || string.IsNullOrEmpty(newUser.Ocupation))
        {
            //todo add error modal
            return;
        }
        StringContent httpContent = new StringContent(JsonConvert.SerializeObject(newUser));
        HttpRequestMessage requestMessage = new HttpRequestMessage(HttpMethod.Post, MyNavigationManager.BaseUri + "api/AddUser");
        requestMessage.Content = new StringContent(JsonConvert.SerializeObject(newUser),
                        Encoding.UTF8, "application/json");
        var response = await httpClient.SendAsync(requestMessage);
        if (response.IsSuccessStatusCode)
        {
            //todo add error success
        }
        else
        {
            //todo add error modal
        }
    }
}
